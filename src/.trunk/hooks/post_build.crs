use std::{env, fs, io::Result, path::Path, process, process::Command, process::Stdio};

fn main() {
    let current = env::current_dir().unwrap();
    let mut fullpath = fs::canonicalize(current).unwrap();
    fullpath.push("src/.trunk/hooks");

    let exe = Exe { base: fullpath };

    exe.cargo_script("inline_cdn", &[]);
    exe.cargo_script("replace_service_worker", &[]);
    exe.cargo_script(
        "remove_artifacts",
        &[
            "-d",
            ".output/dist/.stage",
            "-p",
            "assets\\js\\glue.js",
            "-r",
            "\\.scss$",
        ],
    );
}

struct Exe<T: AsRef<Path>> {
    base: T,
}

impl<T: AsRef<Path>> Exe<T> {
    fn cargo_script<'a>(&self, script: &'a str, args: &'a [&str]) {
        let mut cmd = Command::new("cargo");
        cmd.arg("script")
            .arg(self.base.as_ref().join(script))
            .arg("--")
            .args(args)
            .stdout(Stdio::inherit())
            .stderr(Stdio::inherit());

        println!("\x1b[32mexec: {:?}\x1b[0m", cmd);
        cmd.output();
    }
}
